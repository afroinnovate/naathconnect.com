name: Create Release

on:
  push:
    branches: [ main ]

# Add permissions for release creation
permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate CalVer Release Tag 📅
        id: calver
        run: |
          # Get current year and month
          YEAR=$(date +%Y)
          MONTH=$(date +%-m)  # Remove leading zero
          
          # Get existing tags for current month, including remote tags
          git fetch --tags
          CURRENT_MONTH_PATTERN="${YEAR}.${MONTH}."
          
          # Get all existing tags for current month and extract iterations
          EXISTING_ITERATIONS=$(git tag -l "v${CURRENT_MONTH_PATTERN}*" | \
            sed "s/v${CURRENT_MONTH_PATTERN}//g" | \
            grep -E '^[0-9]+$' | \
            sort -n)
          
          echo "Found existing iterations for ${YEAR}.${MONTH}: $EXISTING_ITERATIONS"
          
          # Find the next available iteration
          ITERATION=1
          while true; do
            TEST_VERSION="${YEAR}.${MONTH}.${ITERATION}"
            TEST_TAG="v${TEST_VERSION}"
            
            # Check if this tag already exists
            if git tag -l "$TEST_TAG" | grep -q "$TEST_TAG"; then
              echo "Tag $TEST_TAG already exists, trying next iteration..."
              ITERATION=$((ITERATION + 1))
            else
              echo "Found available version: $TEST_VERSION"
              break
            fi
            
            # Safety check to prevent infinite loop
            if [ $ITERATION -gt 100 ]; then
              echo "Error: Too many iterations for this month"
              exit 1
            fi
          done
          
          NEW_VERSION="${YEAR}.${MONTH}.${ITERATION}"
          
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "year=${YEAR}" >> $GITHUB_OUTPUT
          echo "month=${MONTH}" >> $GITHUB_OUTPUT
          echo "iteration=${ITERATION}" >> $GITHUB_OUTPUT
          
          echo "Generated version: ${NEW_VERSION}"
          echo "Final tag will be: v${NEW_VERSION}"

      - name: Get Commit Messages for Release Notes 📝
        id: release_notes
        run: |
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # If no previous tags, get last 5 commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" -5)
          else
            # Get commits since last tag
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)")
          fi
          
          # If no commits since last tag, get the current commit
          if [ -z "$COMMITS" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" -1)
          fi
          
          # Create multiline output
          {
            echo 'notes<<EOF'
            echo "## Naath Connect Release ${{ steps.calver.outputs.version }}"
            echo ""
            echo "### 🚀 What's New in this Release"
            echo ""
            echo "$COMMITS"
            echo ""
            echo "### 📅 Release Information"
            echo "- **Release Date**: $(date '+%B %d, %Y')"
            echo "- **Version**: ${{ steps.calver.outputs.version }}"
            echo "- **Month**: ${{ steps.calver.outputs.month }} (${{ steps.calver.outputs.year }})"
            echo "- **Iteration**: ${{ steps.calver.outputs.iteration }}"
            echo ""
            echo "### 🌟 Naath Connect Features"
            echo "- Secure money transfers to East Africa"
            echo "- Dahabshiil partnership for compliance"
            echo "- WhatsApp-based customer service"
            echo "- Support for 8 East African countries"
            echo ""
            echo "*This release follows Calendar Versioning (CalVer) format: YYYY.M.ITERATION*"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Create Git Tag 🏷️
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="v${{ steps.calver.outputs.version }}"
          
          # Final safety check before creating tag
          if git tag -l "$TAG_NAME" | grep -q "$TAG_NAME"; then
            echo "❌ Error: Tag $TAG_NAME still exists after collision check!"
            echo "This should not happen. Please check the workflow logic."
            exit 1
          fi
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          echo "Creating tag: $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"
          
          echo "✅ Successfully created and pushed tag: $TAG_NAME"

      - name: Create GitHub Release 🎉
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.calver.outputs.version }}
          name: "v${{ steps.calver.outputs.version }}"
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Update Release Summary 📊
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: v${{ steps.calver.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Date**: $(date '+%B %d, %Y')" >> $GITHUB_STEP_SUMMARY
          echo "**Month Iteration**: ${{ steps.calver.outputs.iteration }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Full Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.calver.outputs.version }})" >> $GITHUB_STEP_SUMMARY